<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>03webpack的Html插件</title>
    <link href="/2022/05/18/03webpack%E7%9A%84Html%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/05/18/03webpack%E7%9A%84Html%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="webpack-dev-server插件"><a href="#webpack-dev-server插件" class="headerlink" title="webpack-dev-server插件"></a>webpack-dev-server插件</h3><ol><li>安装webpack-dev-server<br> npm install webpack-dev-server -D</li><li>运行webpack-dev-server<br> npx webpack-dev-server<br> 该命令不会真的会去打包文件，只是把这种文件写到内存中（内存中的打包）</li><li>开发服务器配置（在webpack.config.js中配置）</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">devServer: &#123; <span class="hljs-regexp">//</span> 开发服务器的配置<br>    port: <span class="hljs-number">3000</span>, <span class="hljs-regexp">//</span> 端口<br>    progress: true, <span class="hljs-regexp">//</span> 在内存打包时候看到进度条<br>    contentBase: <span class="hljs-string">&#x27;./build&#x27;</span>, <span class="hljs-regexp">//</span> 找到当前的文件夹<br>    compress: true<br>&#125;,<br></code></pre></td></tr></table></figure><ol start="4"><li>通过配置package.json文件运行<br>用npm run build执行打包了，npm run dev直接运行</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack --config webpack.config.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack-dev-server&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h3 id="webpack-dev-server详细配置"><a href="#webpack-dev-server详细配置" class="headerlink" title="webpack-dev-server详细配置"></a>webpack-dev-server详细配置</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs awk">devServer: &#123; <span class="hljs-regexp">//</span> 开发服务器的配置<br>    port: <span class="hljs-number">3000</span>, <span class="hljs-regexp">//</span> 指定要监听请求的端口号<br>    progress: true, <span class="hljs-regexp">//</span> 在内存打包时候看到进度条<br>    contentBase: path.join(__dirname, <span class="hljs-string">&quot;,/build&quot;</span>), <span class="hljs-regexp">//</span> 默认情况下，将使用当前工作目录作为提供内容的目录，但是你可以修改为其他目录<br>    <span class="hljs-regexp">//</span> [path.join(__dirname, <span class="hljs-string">&quot;public&quot;</span>), path.join(__dirname, <span class="hljs-string">&quot;assets&quot;</span>)]<br>    compress: true, <span class="hljs-regexp">//</span> 启用gzip 压缩<br>    clientLogLevel: <span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-regexp">//</span> 可能的值有 none, error, warning 或者 info（默认值）<br>    headers: &#123; <span class="hljs-regexp">//</span> 在所有请求中添加首部内容：<br>        <span class="hljs-string">&quot;X-Custom-Foo&quot;</span>: <span class="hljs-string">&quot;bar&quot;</span><br>    &#125;,<br> lazy: true,<span class="hljs-regexp">//</span>当启用 lazy 时，dev-server 只有在请求时才编译包(bundle)<br> filename: <span class="hljs-string">&quot;bundle.js&quot;</span>,<span class="hljs-regexp">//</span>在惰性模式中，此选项可减少编译。 默认在惰性模式，每个请求结果都会产生全新的编译<br> headers: &#123; <span class="hljs-regexp">//</span> 在所有请求中添加首部内容：<br>   <span class="hljs-string">&quot;X-Custom-Foo&quot;</span>: <span class="hljs-string">&quot;bar&quot;</span><br> &#125;,<br> historyApiFallback: &#123;Boolean|Object&#125;,<br> host: <span class="hljs-string">&quot;127.0.0.1&quot;</span> <span class="hljs-regexp">//</span>指定使用一个 host。默认是 localhost<br> hot: &#123;Boolean&#125;, <span class="hljs-regexp">//</span>启用 webpack 的模块热替换特性,<br> hotOnly: &#123;Boolean&#125;,<br> https: &#123;Boolean&#125;, <span class="hljs-regexp">//</span>默认情况下，dev-server 通过 HTTP 提供服务。也可以选择带有 HTTPS 的 HTTP/<span class="hljs-number">2</span> 提供服务<br> inline: &#123;Boolean&#125;, <span class="hljs-regexp">//</span>在 dev-server 的两种不同模式之间切换。默认情况下，应用程序启用内联模式(inline mode)<br> noInfo: &#123;Boolean&#125;,<span class="hljs-regexp">//</span>启用 noInfo 后，诸如「启动时和每次保存之后，那些显示的 webpack 包(bundle)信息」的消息将被隐藏。错误和警告仍然会显示<br> proxy: &#123;object&#125;,<span class="hljs-regexp">//</span><br> public: &#123;string&#125;,<span class="hljs-regexp">//</span><br> publicPath: &#123;string&#125;,<span class="hljs-regexp">//</span><br> quiet: &#123;Boolean&#125;,<span class="hljs-regexp">//</span>启用 quiet 后，除了初始启动信息之外的任何内容都不会被打印到控制台。这也意味着来自 webpack 的错误或警告在控制台不可见<br> setup: &#123;<span class="hljs-keyword">function</span>&#125;,<span class="hljs-regexp">//</span><br> staticOptions: &#123;object&#125;,<span class="hljs-regexp">//</span><br> stats: &#123;string|object&#125;.<span class="hljs-regexp">//</span>允许你精确控制 bundle 信息展示<br> watchContentBase: &#123;Boolean&#125;,<span class="hljs-regexp">//</span>告诉服务器监视那些通过 devServer.contentBase 选项提供的文件。文件改动将触发整个页面重新加载,默认被禁<br> watchOptions: &#123;object&#125;,<span class="hljs-regexp">//</span> <br>&#125;<br></code></pre></td></tr></table></figure><p>详细配置和说明参考：<a href="https://www.html.cn/doc/webpack2/configuration/dev-server/">https://www.html.cn/doc/webpack2/configuration/dev-server/</a></p><h3 id="HTML插件"><a href="#HTML插件" class="headerlink" title="HTML插件"></a>HTML插件</h3><p>将html文件的index文件生成在build目录下</p><ol><li>在src目录中创建index.html文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>自学webpack<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 模板 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>安装html-webpack-plugin<br> npm install html-webpack-plugin -D</li><li>在webpack中引用html-webpack-plugin插件<br> let HtmlWebpackPlugin &#x3D; require(“html-webpack-plugin”);</li><li>在webpack.config.js中配置配置相应的参数</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">plugins:[ <span class="hljs-regexp">//</span> 数组 放着所有的插件<br>    new HtmlWebpackPlugin(&#123;<br>        template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>        filename: <span class="hljs-string">&#x27;index.html&#x27;</span>,<br>  <span class="hljs-regexp">//</span> 压缩HTML代码<br>        minify: &#123;<br>            removeAttributeQuotes: true, <span class="hljs-regexp">//</span>去掉双引号<br>            collapseWhitespace: true, <span class="hljs-regexp">//</span>移除空格，将html打印成一行<br>   removeComments: true <span class="hljs-regexp">//</span>移除注释<br>        &#125;,<br>        hash: true <span class="hljs-regexp">//</span> 为了解决缓存的问题，添加哈希戳<br>    &#125;)<br>]<br></code></pre></td></tr></table></figure><h3 id="html-webpack-plugin详细配置"><a href="#html-webpack-plugin详细配置" class="headerlink" title="html-webpack-plugin详细配置"></a>html-webpack-plugin详细配置</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php">this.options = _.<span class="hljs-title function_ invoke__">extend</span>(&#123;<br>  <span class="hljs-attr">template</span>: path.<span class="hljs-title function_ invoke__">join</span>(__dirname, <span class="hljs-string">&#x27;default_index.ejs&#x27;</span>),<br>  <span class="hljs-attr">templateParameters</span>: templateParametersGenerator,<br>  <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;index.html&#x27;</span>,<br>  <span class="hljs-attr">hash</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">inject</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">compile</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">favicon</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">minify</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">cache</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">showErrors</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span>,<br>  <span class="hljs-attr">excludeChunks</span>: [],<br>  <span class="hljs-attr">chunksSortMode</span>: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>  <span class="hljs-attr">meta</span>: &#123;&#125;,<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Webpack App&#x27;</span>,<br>  <span class="hljs-attr">xhtml</span>: <span class="hljs-literal">false</span><br>&#125;, options);<br></code></pre></td></tr></table></figure><p>简单介绍各个含义：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lasso">title：&#123;<span class="hljs-built_in">String</span>&#125; 用来生成页面的 title 元素<br>template：&#123;<span class="hljs-built_in">String</span>&#125; 源模板文件<br>inject：&#123;<span class="hljs-built_in">Boolean</span>|<span class="hljs-built_in">String</span>&#125; 放置js资源。<span class="hljs-literal">true</span> || <span class="hljs-string">&#x27;head&#x27;</span> || <span class="hljs-string">&#x27;body&#x27;</span> || <span class="hljs-literal">false</span>,如果设置为 <span class="hljs-literal">true</span> 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，<span class="hljs-string">&#x27;head&#x27;</span> 将放置到 head 元素中。<span class="hljs-literal">false</span>则不会引入。<br>hash:&#123;<span class="hljs-built_in">Boolean</span>&#125; 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS 文件，对于解除 <span class="hljs-keyword">cache</span> 很有用<br>favicon:&#123;<span class="hljs-built_in">String</span>&#125; 添加特定的 favicon 路径到输出的 HTML 文件中<br><span class="hljs-keyword">cache</span>:&#123;<span class="hljs-built_in">Boolean</span>&#125; 只有文件修改后才会重新打包文件<br>minify：&#123;<span class="hljs-built_in">Boolean</span>|Object&#125; <span class="hljs-literal">true</span> <span class="hljs-keyword">if</span> mode is <span class="hljs-string">&#x27;production&#x27;</span>, otherwise <span class="hljs-literal">false</span>,<br>&#123;<br>  collapseWhitespace: <span class="hljs-literal">true</span>,<span class="hljs-comment">//是否去除html中的空格、换行符,元素内的不会去除的</span><br>  removeComments: <span class="hljs-literal">true</span>,<span class="hljs-comment">//是否去除html注释</span><br>  removeRedundantAttributes: <span class="hljs-literal">true</span>,<span class="hljs-comment">//</span><br>  removeScriptTypeAttributes: <span class="hljs-literal">true</span>,<span class="hljs-comment">//去掉script标签的type属性</span><br>  removeStyleLinkTypeAttributes: <span class="hljs-literal">true</span>,<span class="hljs-comment">//去掉style和link标签的type属性</span><br>  useShortDoctype: <span class="hljs-literal">true</span><span class="hljs-comment">//</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="http://www.myjscode.com/page/articleMap.html">http://www.myjscode.com/page/articleMap.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>02webpack打包出来的文件解析</title>
    <link href="/2022/05/18/02webpack%E6%89%93%E5%8C%85%E5%87%BA%E6%9D%A5%E7%9A%84%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/05/18/02webpack%E6%89%93%E5%8C%85%E5%87%BA%E6%9D%A5%E7%9A%84%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="打包后源码分析"><a href="#打包后源码分析" class="headerlink" title="打包后源码分析"></a>打包后源码分析</h3><p>打包后源码分析<br>实际上是:</p><figure class="highlight lisp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">function</span>(<span class="hljs-name">modules</span>)&#123;&#125;)(&#123;key1<span class="hljs-symbol">:value1</span>,key2<span class="hljs-symbol">:value2</span>......&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params">modules</span>) &#123; <span class="hljs-comment">// webpackBootstrap</span><br> <span class="hljs-comment">// The module cache 先定义模块缓存</span><br> <span class="hljs-comment">// &quot;./src/index.js&quot;   :&#123;&#125;</span><br> <span class="hljs-keyword">var</span> installedModules = &#123;&#125;;<br> <span class="hljs-comment">// The require function 配置了，实现了require方法</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-params">moduleId</span>) &#123;<span class="hljs-comment">// ./src/index.js</span><br>  <span class="hljs-comment">// Check if module is in cache 检查模块是否在缓存中</span><br>  <span class="hljs-keyword">if</span>(installedModules[moduleId]) &#123;<br>   <span class="hljs-keyword">return</span> installedModules[moduleId].<span class="hljs-property">exports</span>;<br>  &#125;<br>  <span class="hljs-comment">// Create a new module (and put it into the cache) 创建一个新模块(并将其放入缓存中)</span><br>  <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = installedModules[moduleId] = &#123;<br>   <span class="hljs-attr">i</span>: moduleId,<br>   <span class="hljs-attr">l</span>: <span class="hljs-literal">false</span>,<br>   <span class="hljs-attr">exports</span>: &#123;&#125;<br>  &#125;;<br>  <span class="hljs-comment">// Execute the module function 执行模块函数</span><br>  modules[moduleId].<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>, <span class="hljs-variable language_">module</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>, __webpack_require__);<br>  <span class="hljs-comment">// Flag the module as loaded 将模块标记为已加载</span><br>  <span class="hljs-variable language_">module</span>.<span class="hljs-property">l</span> = <span class="hljs-literal">true</span>;<br>  <span class="hljs-comment">// Return the exports of the module 返回模块的导出</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>;<br> &#125;<br> <span class="hljs-comment">// expose the modules object (__webpack_modules__) 公开模块对象(webpack模块)</span><br> __webpack_require__.<span class="hljs-property">m</span> = modules;<br> <span class="hljs-comment">// expose the module cache 公开模块缓存</span><br> __webpack_require__.<span class="hljs-property">c</span> = installedModules;<br> <span class="hljs-comment">// define getter function for harmony exports 为兼容其它模块导出定义getter函数</span><br> __webpack_require__.<span class="hljs-property">d</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">exports</span>, name, getter</span>) &#123;<br>  <span class="hljs-keyword">if</span>(!__webpack_require__.<span class="hljs-title function_">o</span>(<span class="hljs-built_in">exports</span>, name)) &#123;<br>   <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-built_in">exports</span>, name, &#123; <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">get</span>: getter &#125;);<br>  &#125;<br> &#125;;<br> <span class="hljs-comment">// define __esModule on exports</span><br> __webpack_require__.<span class="hljs-property">r</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">exports</span></span>) &#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Symbol</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>) &#123;<br>   <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-built_in">exports</span>, <span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Module&#x27;</span> &#125;);<br>  &#125;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-built_in">exports</span>, <span class="hljs-string">&#x27;__esModule&#x27;</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-literal">true</span> &#125;);<br> &#125;;<br> <span class="hljs-comment">// create a fake namespace object </span><br> <span class="hljs-comment">// mode &amp; 1: value is a module id, require it</span><br> <span class="hljs-comment">// mode &amp; 2: merge all properties of value into the ns</span><br> <span class="hljs-comment">// mode &amp; 4: return value when already ns object</span><br>  <span class="hljs-comment">// mode &amp; 8|1: behave like require</span><br>  <span class="hljs-comment">//-------------------------中文-------------------------</span><br>  <span class="hljs-comment">//创建一个假的名称空间对象</span><br>  <span class="hljs-comment">//模式＆1：值是模块ID，需要它</span><br>  <span class="hljs-comment">//模式＆2：将值的所有属性合并到ns中</span><br>  <span class="hljs-comment">//模式＆4：当已经有ns对象时返回值</span><br>  <span class="hljs-comment">//模式＆8 | 1：表现为require</span><br> __webpack_require__.<span class="hljs-property">t</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">value, mode</span>) &#123;<br>  <span class="hljs-keyword">if</span>(mode &amp; <span class="hljs-number">1</span>) value = <span class="hljs-title function_">__webpack_require__</span>(value);<br>  <span class="hljs-keyword">if</span>(mode &amp; <span class="hljs-number">8</span>) <span class="hljs-keyword">return</span> value;<br>  <span class="hljs-keyword">if</span>((mode &amp; <span class="hljs-number">4</span>) &amp;&amp; <span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; value &amp;&amp; value.<span class="hljs-property">__esModule</span>) <span class="hljs-keyword">return</span> value;<br>  <span class="hljs-keyword">var</span> ns = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<br>  __webpack_require__.<span class="hljs-title function_">r</span>(ns);<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(ns, <span class="hljs-string">&#x27;default&#x27;</span>, &#123; <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">value</span>: value &#125;);<br>  <span class="hljs-keyword">if</span>(mode &amp; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-keyword">typeof</span> value != <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> value) __webpack_require__.<span class="hljs-title function_">d</span>(ns, key, <span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) &#123; <span class="hljs-keyword">return</span> value[key]; &#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, key));<br>  <span class="hljs-keyword">return</span> ns;<br> &#125;;<br>  <span class="hljs-comment">// getDefaultExport function for compatibility with non-harmony modules</span><br>  <span class="hljs-comment">// getDefaultExport函数用来调用不兼容的模块</span><br> __webpack_require__.<span class="hljs-property">n</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">module</span></span>) &#123;<br>  <span class="hljs-keyword">var</span> getter = <span class="hljs-variable language_">module</span> &amp;&amp; <span class="hljs-variable language_">module</span>.<span class="hljs-property">__esModule</span> ?<br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">getDefault</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>[<span class="hljs-string">&#x27;default&#x27;</span>]; &#125; :<br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">getModuleExports</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>; &#125;;<br>  __webpack_require__.<span class="hljs-title function_">d</span>(getter, <span class="hljs-string">&#x27;a&#x27;</span>, getter);<br>  <span class="hljs-keyword">return</span> getter;<br> &#125;;<br> <span class="hljs-comment">// Object.prototype.hasOwnProperty.call</span><br> __webpack_require__.<span class="hljs-property">o</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">object, property</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(object, property); &#125;;<br> <span class="hljs-comment">// __webpack_public_path__</span><br> __webpack_require__.<span class="hljs-property">p</span> = <span class="hljs-string">&quot;&quot;</span>;<br> <span class="hljs-comment">// Load entry module and return exports 载入口模块并返回导出</span><br> <span class="hljs-keyword">return</span> <span class="hljs-title function_">__webpack_require__</span>(__webpack_require__.<span class="hljs-property">s</span> = <span class="hljs-string">&quot;./src/index.js&quot;</span>);<span class="hljs-comment">//入口模块</span><br>&#125;)<br><br>(&#123;<br><span class="hljs-comment">// key值</span><br><span class="hljs-string">&quot;./src/a.js&quot;</span>:<br><span class="hljs-comment">/*!******************!*\</span><br><span class="hljs-comment">  !*** ./src/a.js ***!</span><br><span class="hljs-comment">  \******************/</span><br><span class="hljs-comment">/*! no static exports found 没有找到静态导出 */</span><br><span class="hljs-comment">// value</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span></span>) &#123;<br><br><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;module.exports = \&quot;Hello webpack.\&quot;\n\n//# sourceURL=webpack:///./src/a.js?&quot;</span>);<br><br>&#125;),<br><br><span class="hljs-comment">// key值</span><br><span class="hljs-string">&quot;./src/index.js&quot;</span>:<br><span class="hljs-comment">/*!**********************!*\</span><br><span class="hljs-comment">  !*** ./src/index.js ***!</span><br><span class="hljs-comment">  \**********************/</span><br><span class="hljs-comment">/*! no static exports found 没有找到静态导出 */</span><br><span class="hljs-comment">// value</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span>, __webpack_require__</span>) &#123;<br><br><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;let str = __webpack_require__(/*! ./a.js */ \&quot;./src/a.js\&quot;);\r\nconsole.log(str);\n\n//# sourceURL=webpack:///./src/index.js?&quot;</span>);<br><br>&#125;)<br><br>&#125;);<br></code></pre></td></tr></table></figure><p>手动指定webpack文件：<br> npx webppack –config webpack.config.js</p><p>在package.json中配置一些脚本，通过脚本执行一些命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack --config webpack.config.js&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Webpack介绍和基础配置</title>
    <link href="/2022/05/18/01Webpack%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/05/18/01Webpack%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="webpack介绍"><a href="#webpack介绍" class="headerlink" title="webpack介绍"></a>webpack介绍</h3><p><img src="https://img2020.cnblogs.com/blog/1421450/202007/1421450-20200701213559208-320869816.png" alt="webpack流程"><br>Webpack是一种前端资源构建工具，一个静态模块打包器（module bundler）</p><ul><li>webpack可以做的事情<br> 代码转换、文件优化、代码分割、模块合并、自动刷新、代码校验、自动发布</li></ul><h4 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h4><ul><li><p>安装本地的webpack</p></li><li><p>webpack webpack-cli -D（-D是指开发依赖，表示上线不需要这个包）</p></li></ul><p>例如：这里用的是yarn管理工具</p><ol><li>初始化：yarn init -y</li><li>安装webpack-cli：yarn add webpack webpack-cli -D</li></ol><h4 id="webpack可以进行0配置"><a href="#webpack可以进行0配置" class="headerlink" title="webpack可以进行0配置"></a>webpack可以进行0配置</h4><ul><li><p>打包工具 -&gt; 输出后的结果（js模块）</p></li><li><p>打包（支持我们的js的模块化）</p></li><li><p>打包命令：npx webpack（webpack5.0以上支持）<br> 执行原理：这样执行会去找node_modules下的bin文件夹，bin中有webpack.cmd文件，然后就执行webpack&#x2F;webpack.js文件，然后需要安装webpack-cli<br>webpack.cmd</p></li></ul><figure class="highlight less"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@IF</span> EXIST <span class="hljs-string">&quot;%~dp0\node.exe&quot;</span> (<br>  <span class="hljs-string">&quot;%~dp0\node.exe&quot;</span>  <span class="hljs-string">&quot;%~dp0\..\webpack\bin\webpack.js&quot;</span> %*<br>) ELSE (<br>  <span class="hljs-variable">@SETLOCAL</span><br>  <span class="hljs-variable">@SET</span> PATHEXT=%<span class="hljs-attribute">PATHEXT</span>:;.JS;=;%<br>  node  <span class="hljs-string">&quot;%~dp0\..\webpack\bin\webpack.js&quot;</span> %*<br>)<br></code></pre></td></tr></table></figure><h4 id="手动配置webpack"><a href="#手动配置webpack" class="headerlink" title="手动配置webpack"></a>手动配置webpack</h4><ul><li><p>默认配置文件的名字 webpack.config.js</p></li><li><p>为什么叫webpack.config.js这个名字？<br> 因为node_moudes下的webpack下会默认调用webpack-cli，webpack-cli里面有解析module.exports对象中的参数，在config-yargs.js里，这里面有解析的关系和说明，你可以搜索关键字webpack.config.js来查找。</p></li></ul><h3 id="Webpack-五个核心概念"><a href="#Webpack-五个核心概念" class="headerlink" title="Webpack 五个核心概念"></a>Webpack 五个核心概念</h3><ol><li>Entry：入口</li><li>Output：输出</li><li>Loader：让Webpack能够去处理那些非JavaScript文件</li><li>Plugins：插件</li><li>Mode：Webpack使用相应模式的配置</li></ol><p>webpack.config.js</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>webpack 是node写出来的，用node的写法<br>let path = require(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-regexp">//</span>console.log(path.resolve(<span class="hljs-string">&#x27;dist&#x27;</span>));<br>module.exports = &#123;<br> <span class="hljs-regexp">//</span> node配置<br>    mode: <span class="hljs-string">&#x27;development&#x27;</span>,<span class="hljs-regexp">//</span>模式，默认有两种production / development<br> <span class="hljs-regexp">//</span> entry 入口配置<br>    entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<span class="hljs-regexp">//</span>入口<br> <span class="hljs-regexp">//</span> output 输出配置<br>    output: &#123;<br>        filename: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<span class="hljs-regexp">//</span>打包后的文件名<br>  <span class="hljs-regexp">//</span> __dirname nodejs的变量，代表当前文件的目录绝对路径<br>        path: path.resolve(__dirname,<span class="hljs-string">&#x27;dist&#x27;</span>)<span class="hljs-regexp">//</span>路径必须是一个绝对路径<br>    &#125;,<br>    module: &#123;<br> rules: [<br>  <span class="hljs-regexp">//</span> 详细loader配置<br> ]<br>    &#125;,<br>    <span class="hljs-regexp">//</span> plugins 插件配置<br>    pugins:[<br>      <span class="hljs-regexp">//</span> 详细plugins的配置<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="entry配置"><a href="#entry配置" class="headerlink" title="entry配置"></a>entry配置</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vim">/**<br> * entry: 入口起点<br> *  <span class="hljs-number">1</span>. <span class="hljs-built_in">string</span> --&gt; <span class="hljs-string">&#x27;./src/index.js&#x27;</span><br> *      单入口<br> *      打包形成一个chunk，输出一个bundle文件。<br> *  <span class="hljs-number">2</span>. array --&gt; [<span class="hljs-string">&#x27;./src/index.js&#x27;</span>, <span class="hljs-string">&#x27;./src/add.js&#x27;</span>]<br> *      多入口<br> *      所有入口文件最终只会形成一个chunk，输出去只有一个bundle文件<br> *          --&gt; 只有在HMR功能中让html热更新生效~<br> *  <span class="hljs-number">3</span>. object<br> *      多入口<br> *      有几个入口问价就形成几个chunk，输出几个bundle文件<br> *      此时chunk的名称是key<br> *      entry: &#123;<br>            <span class="hljs-built_in">index</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>            <span class="hljs-built_in">add</span>: <span class="hljs-string">&#x27;./src/add.js&#x27;</span><br>        &#125;<br><br>        --&gt; 特殊用法<br>        entry: &#123;<br>            <span class="hljs-built_in">index</span>: [<span class="hljs-string">&#x27;./src/index.js&#x27;</span>, <span class="hljs-string">&#x27;./src/count.js&#x27;</span>],<br>            <span class="hljs-built_in">add</span>: <span class="hljs-string">&#x27;./src/add.js&#x27;</span><br>        &#125;<br> */<br></code></pre></td></tr></table></figure><h3 id="output配置"><a href="#output配置" class="headerlink" title="output配置"></a>output配置</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">output: &#123;<br>     <span class="hljs-regexp">//</span> 文件名称（指定名称 + 目录）<br>     filename: <span class="hljs-string">&#x27;js/[name].[contenthash:10].js&#x27;</span>,<br>     <span class="hljs-regexp">//</span> 输出文件目录（将来所有资源输出的公共目录）<br>     path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>     <span class="hljs-regexp">//</span> 所有资源引入公共路径前缀 --&gt; <span class="hljs-string">&#x27;imgs/a.jpg&#x27;</span> --&gt; <span class="hljs-string">&#x27;imgs/a.jpg&#x27;</span><br>     publicPath: <span class="hljs-string">&#x27;/&#x27;</span>,<br>     chunkFilename: <span class="hljs-string">&#x27;js/[name].[contenthash:10]_chunk.js&#x27;</span> <span class="hljs-regexp">//</span> 非入口chunk的名称<br>     <span class="hljs-regexp">//</span> library: <span class="hljs-string">&#x27;[name]&#x27;</span>, <span class="hljs-regexp">//</span> 整个库向外暴露的变量名  一般不用<br>     <span class="hljs-regexp">//</span> libraryTarget: <span class="hljs-string">&#x27;window&#x27;</span>, <span class="hljs-regexp">//</span> 变量名添加到哪个上 browser<br>     <span class="hljs-regexp">//</span> libraryTarget: <span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-regexp">//</span> 变量名添加到哪个上 node<br>     <span class="hljs-regexp">//</span> libraryTarget: <span class="hljs-string">&#x27;commonjs&#x27;</span> <br> &#125;,<br></code></pre></td></tr></table></figure><h3 id="module配置"><a href="#module配置" class="headerlink" title="module配置"></a>module配置</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs awk">module: &#123;<br>    <span class="hljs-regexp">//</span> loader的配置<br>    rules: [<br>        &#123;<br>            <span class="hljs-regexp">//</span> 处理css资源<br>            test: <span class="hljs-regexp">/\.css$/</span>,<br>            <span class="hljs-regexp">//</span> 多个loader用use<br>            use: [<br>                MiniCssExtractPlugin.loader,<br>                <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>                <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,<br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-regexp">//</span> 可以处理less文件,还有sass stylus  node-sass sass-loader<br>            <span class="hljs-regexp">//</span> stylus stylus-loader<br>            test: <span class="hljs-regexp">/\.less$/</span>,<br>            use: [<br>                MiniCssExtractPlugin.loader,<br>                <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>                <span class="hljs-string">&#x27;postcss-loader&#x27;</span>, <span class="hljs-regexp">//</span> 把less -&gt; css  先解析less再执行css<br>                <span class="hljs-string">&#x27;less-loader&#x27;</span> <span class="hljs-regexp">//</span> 把less -&gt; css  先解析less再执行css<br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-regexp">//</span> 处理图片资源<br>            test: <span class="hljs-regexp">/\.(jpg|png|gif)$/</span>,<br>            loader: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>            options: &#123;<br>                limit: <span class="hljs-number">8</span> * <span class="hljs-number">1024</span>,<br>                name: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>                <span class="hljs-regexp">//</span> 关闭es6模块化<br>                esModule: false,<br>                outputPath: <span class="hljs-string">&#x27;imgs&#x27;</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-regexp">//</span> 处理html中img资源<br>            test: <span class="hljs-regexp">/\.html$/</span>,<br>            loader: <span class="hljs-string">&#x27;html-loader&#x27;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-regexp">//</span> 处理其他资源<br>            exclude: <span class="hljs-regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,<br>            loader: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>            options: &#123;<br>                name: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>                outputPath: <span class="hljs-string">&#x27;media&#x27;</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            /**<br>             * 语法检查：eslint-loader eslint<br>             *     注意：只检查自己写的源代码，第三方的库是不用检查的<br>             *     设置检查规则：<br>             *      package.json中eslintConfig中设置~<br>             *      <span class="hljs-string">&quot;eslintConfig&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;extends&quot;</span>: <span class="hljs-string">&quot;airbnb-base&quot;</span><br>                    &#125;<br>             *      airbnb --&gt; eslint-config-airbnb-base eslint-plugin-import eslint<br>             */<br>            test: <span class="hljs-regexp">/\.js$/</span>,<br>            <span class="hljs-regexp">//</span> 排除node_modules下的js文件<br>            exclude: <span class="hljs-regexp">/node_modules/</span>,<br>            <span class="hljs-regexp">//</span> 只检查src下的js文件<br>            include: resolve(__dirname, <span class="hljs-string">&#x27;src&#x27;</span>),<br>            <span class="hljs-regexp">//</span> 优先执行<br>            enforce: <span class="hljs-string">&#x27;pre&#x27;</span>,<br>            <span class="hljs-regexp">//</span> 延后执行<br>            <span class="hljs-regexp">//</span> enforce: <span class="hljs-string">&#x27;post&#x27;</span>,<br>            <span class="hljs-regexp">//</span> 单个loader用loader<br>            loader: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,<br>            options: &#123;<br>                <span class="hljs-regexp">//</span> 自动修复eslint的错误<br>                fix: true<br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-regexp">//</span> 以下配置只会生效一个<br>            oneOf: []<br>        &#125;<br>    ]<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="resolve配置"><a href="#resolve配置" class="headerlink" title="resolve配置"></a>resolve配置</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">resolve: &#123;<br>    <span class="hljs-regexp">//</span> 配置解析模块路径别名：优点简写路径；缺点路径没有提示<br>    alias: &#123;<br>        <span class="hljs-variable">$css</span>: resolve(__dirname, <span class="hljs-string">&#x27;src/css&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-regexp">//</span> 配置省略文件路径的后缀名<br>    extensions: [<span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;.json&#x27;</span>, <span class="hljs-string">&#x27;.jsx&#x27;</span>, <span class="hljs-string">&#x27;.css&#x27;</span>],<br>    <span class="hljs-regexp">//</span> 告诉webpack解析模块是去找哪个目录<br>    modules: [resolve(__dirname, <span class="hljs-string">&#x27;../../node_modules&#x27;</span>), <span class="hljs-string">&#x27;node_modules&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="optimization配置"><a href="#optimization配置" class="headerlink" title="optimization配置"></a>optimization配置</h3><ul><li>引入插件terser-webpack-plugin<br> npm install terser-webpack-plugin -D</li><li>在webpack.config.js中配置插件<br>const TerserWebpackPlugin &#x3D; require(‘terser-webpack-plugin’)</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">optimization:</span> &#123;<br>    <span class="hljs-attr">splitChunks:</span> &#123;<br>        <span class="hljs-attr">chunks:</span> <span class="hljs-string">&#x27;all&#x27;</span>,<br>        <span class="hljs-string">/*//</span> <span class="hljs-string">默认值，可以不写~</span><br>        <span class="hljs-attr">minSize:</span> <span class="hljs-number">30</span> <span class="hljs-string">*</span> <span class="hljs-number">1024</span>, <span class="hljs-string">//</span> <span class="hljs-string">分割的chunk最小为30kb</span><br>        <span class="hljs-attr">maxSiza:</span> <span class="hljs-number">0</span>, <span class="hljs-string">//</span> <span class="hljs-string">最大没有限制</span><br>        <span class="hljs-attr">minChunks:</span> <span class="hljs-number">1</span>, <span class="hljs-string">//</span> <span class="hljs-string">要提取的chunk最少被引用1次</span><br>        <span class="hljs-attr">maxAsyncRequests:</span> <span class="hljs-number">5</span>, <span class="hljs-string">//</span> <span class="hljs-string">按需加载时并行加载的文件的最大数量</span><br>        <span class="hljs-attr">maxInitialRequests:</span> <span class="hljs-number">3</span>, <span class="hljs-string">//</span> <span class="hljs-string">入口js文件最大并行请求数量</span><br>        <span class="hljs-attr">automaticNameDelimiter:</span> <span class="hljs-string">&#x27;~&#x27;</span>, <span class="hljs-string">//</span> <span class="hljs-string">名称链接符</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-literal">true</span>, <span class="hljs-string">//</span> <span class="hljs-string">可以使用命名规则</span><br>        <span class="hljs-attr">cacheGroups:</span> &#123; <span class="hljs-string">//</span> <span class="hljs-string">分割chunk的组</span><br>            <span class="hljs-string">//</span> <span class="hljs-string">node_modules文件会被打包到vendors组的chunk中。</span> <span class="hljs-string">--&gt;</span> <span class="hljs-string">vendors</span> <span class="hljs-string">~xxx.js</span><br>            <span class="hljs-string">//</span> <span class="hljs-string">满足上面的公共规则，如：大小超过30kb，至少被引用一次</span><br>            <span class="hljs-attr">vendors:</span> &#123;<br>                <span class="hljs-attr">test:</span> <span class="hljs-string">/</span>[<span class="hljs-string">\\/</span>]<span class="hljs-string">node_modules</span>[<span class="hljs-string">\\/</span>]<span class="hljs-string">/</span>,<br>                <span class="hljs-attr">priority:</span> <span class="hljs-number">-10</span><br>            &#125;,<br>            <span class="hljs-attr">default:</span> &#123;<br>                <span class="hljs-string">//</span> <span class="hljs-string">要提取的chunk最少被引用2次</span><br>                <span class="hljs-attr">minChunks:</span> <span class="hljs-number">2</span>,<br>                <span class="hljs-string">//</span> <span class="hljs-string">优先级</span><br>                <span class="hljs-attr">priority:</span> <span class="hljs-number">-20</span>,<br>                <span class="hljs-string">//</span> <span class="hljs-string">如果当前要打包的模块，和之前被提取的模块是同一个，就会复用，而不是重新打包</span><br>                <span class="hljs-attr">reuseExistingChunk:</span> <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<span class="hljs-string">*/</span><br>    &#125;,<br>    <span class="hljs-string">//</span> <span class="hljs-string">将当前模块的记录其他模块的hash单独打包为一个文件runtime</span><br>    <span class="hljs-string">//</span> <span class="hljs-string">解决：修改a文件导致b文件的contenthash变化</span><br>    <span class="hljs-attr">runtimeChunk:</span> &#123;<br>        <span class="hljs-attr">name:</span> <span class="hljs-string">entrypoint</span> <span class="hljs-string">=&gt;</span> <span class="hljs-string">`runtime-$</span>&#123;<span class="hljs-string">entrypoint.name</span>&#125;<span class="hljs-string">`</span><br>    &#125;,<br>    <span class="hljs-attr">TerserWebpackPlugin:</span> [<br>        <span class="hljs-string">//</span> <span class="hljs-string">配置生产环境的压缩方案：js和css</span><br>        <span class="hljs-string">new</span> <span class="hljs-string">TerserWebpackPlugin(</span>&#123;<br>            <span class="hljs-string">//</span> <span class="hljs-string">开始缓存</span><br>            <span class="hljs-attr">cache:</span> <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">//</span> <span class="hljs-string">开始多进程打包</span><br>            <span class="hljs-attr">parallel:</span> <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">//</span> <span class="hljs-string">启动source-map</span><br>            <span class="hljs-attr">sourceMap:</span> <span class="hljs-literal">true</span><br>        &#125;<span class="hljs-string">)</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
